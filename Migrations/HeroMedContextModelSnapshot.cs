// <auto-generated />
using System;
using HeroMed_API.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HeroMed_API.Migrations
{
    [DbContext(typeof(HeroMedContext))]
    partial class HeroMedContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HeroMed_API.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Birthdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DocumentsPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EmploymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeniorityYears")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("SectionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b273992-95bd-4baf-b298-92355f67b620"),
                            Address = "Arges, Pitesti, Strada Mioarei Nr1",
                            Birthdate = new DateTimeOffset(new DateTime(1978, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            DocumentsPath = "X://ToCompute",
                            Email = "unemail@gmail.com",
                            EmploymentDate = new DateTimeOffset(new DateTime(2007, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Mihai",
                            Gender = "M",
                            JobId = new Guid("cdb98091-c8c1-4774-9612-57c4e6fb81f2"),
                            LastName = "Calugar",
                            Nationality = "Romanian",
                            PhoneNumber = "+40712345678",
                            PlaceOfBirth = "Arges, Pitesti, Strada Mioarei Nr. 1",
                            Salary = 7200m,
                            SectionId = new Guid("10261ba6-d3f9-48bb-b48f-12bf7a43bb82"),
                            SeniorityYears = 4
                        },
                        new
                        {
                            Id = new Guid("0b273992-95bd-4baf-b298-92355f67b621"),
                            Address = "Arges, Pitesti, Strada Mioarei Nr1",
                            Birthdate = new DateTimeOffset(new DateTime(1968, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            DocumentsPath = "X://ToCompute",
                            Email = "altemail@gmail.com",
                            EmploymentDate = new DateTimeOffset(new DateTime(2000, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "George",
                            Gender = "M",
                            JobId = new Guid("cdb98091-c8c1-4774-9612-57c4e6fb81f2"),
                            LastName = "Patrar",
                            Nationality = "Romanian",
                            PhoneNumber = "+40723456789",
                            PlaceOfBirth = "Bucurest, Sectorul 1, O strada nr 3",
                            Salary = 29000m,
                            SectionId = new Guid("10261ba6-d3f9-48bb-b48f-12bf7a43bb83"),
                            SeniorityYears = 22
                        },
                        new
                        {
                            Id = new Guid("0b273992-95bd-4baf-b298-92355f67b622"),
                            Address = "Arges, Pitesti, Strada Mioarei Nr1",
                            Birthdate = new DateTimeOffset(new DateTime(1978, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            DocumentsPath = "X://ToCompute",
                            Email = "unemail@gmail.com",
                            EmploymentDate = new DateTimeOffset(new DateTime(2007, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Mihai",
                            Gender = "M",
                            JobId = new Guid("cdb98091-c8c1-4774-9612-57c4e6fb81f3"),
                            LastName = "Calugar",
                            Nationality = "Romanian",
                            PhoneNumber = "+40712345678",
                            PlaceOfBirth = "Arges, Pitesti, Strada Mioarei Nr. 1",
                            Salary = 7200m,
                            SectionId = new Guid("10261ba6-d3f9-48bb-b48f-12bf7a43bb84"),
                            SeniorityYears = 4
                        });
                });

            modelBuilder.Entity("HeroMed_API.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnnualPaidLeave")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxBruteSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinBruteSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinISCEDLevel")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkHoursPerMonth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdb98091-c8c1-4774-9612-57c4e6fb81f2"),
                            AnnualPaidLeave = 22,
                            Currency = "RON",
                            Description = "It usually assists the higher grades and leads to the fulfillment of easy tasks (harvests, vaccines, etc.)",
                            MaxBruteSalary = 12368m,
                            MinBruteSalary = 7094m,
                            MinISCEDLevel = 6,
                            Title = "Nurse",
                            WorkHoursPerMonth = 180
                        },
                        new
                        {
                            Id = new Guid("cdb98091-c8c1-4774-9612-57c4e6fb81f3"),
                            AnnualPaidLeave = 22,
                            Currency = "RON",
                            Description = "He deals with the inventory and distribution of medicines inside unit.",
                            MaxBruteSalary = 12614m,
                            MinBruteSalary = 4227m,
                            MinISCEDLevel = 6,
                            Title = "Chemist",
                            WorkHoursPerMonth = 180
                        },
                        new
                        {
                            Id = new Guid("cdb98091-c8c1-4774-9612-57c4e6fb81f4"),
                            AnnualPaidLeave = 22,
                            Currency = "RON",
                            Description = "He takes care of heavy tasks. It usually represents the penultimate grade after the department head.",
                            MaxBruteSalary = 26986m,
                            MinBruteSalary = 7000m,
                            MinISCEDLevel = 8,
                            Title = "Primary doctor",
                            WorkHoursPerMonth = 180
                        },
                        new
                        {
                            Id = new Guid("cdb98091-c8c1-4774-9612-57c4e6fb81f5"),
                            AnnualPaidLeave = 22,
                            Currency = "RON",
                            Description = "He coordinates the whole department.",
                            MaxBruteSalary = 29795m,
                            MinBruteSalary = 28795m,
                            MinISCEDLevel = 8,
                            Title = "Head of department",
                            WorkHoursPerMonth = 180
                        });
                });

            modelBuilder.Entity("HeroMed_API.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumEmployeesNo")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10261ba6-d3f9-48bb-b48f-12bf7a43bb82"),
                            Description = "This section deals with diseas related to the heart.",
                            MaximumEmployeesNo = 5,
                            Title = "Cardiology"
                        },
                        new
                        {
                            Id = new Guid("10261ba6-d3f9-48bb-b48f-12bf7a43bb83"),
                            Description = "This section deals with diseases related to the nervous system.",
                            MaximumEmployeesNo = 3,
                            Title = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("10261ba6-d3f9-48bb-b48f-12bf7a43bb84"),
                            Description = "This section deals with diseases related to the respiratory system.",
                            MaximumEmployeesNo = 6,
                            Title = "Pneumology"
                        },
                        new
                        {
                            Id = new Guid("10261ba6-d3f9-48bb-b48f-12bf7a43bb85"),
                            Description = "This section deals with radiographs.",
                            MaximumEmployeesNo = 9,
                            Title = "Radiology"
                        });
                });

            modelBuilder.Entity("HeroMed_API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fdbe311-ac30-4a06-be2c-0fcc779b9246"),
                            Admin = true,
                            CreatedDate = new DateTimeOffset(new DateTime(2022, 11, 22, 20, 15, 20, 364, DateTimeKind.Unspecified).AddTicks(493), new TimeSpan(0, 2, 0, 0, 0)),
                            EmployeeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Password = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("1fdbe311-ac30-4a06-be2c-0fcc779b9247"),
                            Admin = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2022, 11, 22, 20, 15, 20, 364, DateTimeKind.Unspecified).AddTicks(504), new TimeSpan(0, 2, 0, 0, 0)),
                            EmployeeId = new Guid("0b273992-95bd-4baf-b298-92355f67b620"),
                            Password = "OParola",
                            Username = "UnUSername"
                        },
                        new
                        {
                            Id = new Guid("1fdbe311-ac30-4a06-be2c-0fcc779b9248"),
                            Admin = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2022, 11, 22, 20, 15, 20, 364, DateTimeKind.Unspecified).AddTicks(508), new TimeSpan(0, 2, 0, 0, 0)),
                            EmployeeId = new Guid("0b273992-95bd-4baf-b298-92355f67b621"),
                            Password = "AltaParola",
                            Username = "AltUSername"
                        });
                });

            modelBuilder.Entity("HeroMed_API.Entities.Employee", b =>
                {
                    b.HasOne("HeroMed_API.Entities.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeroMed_API.Entities.Section", "Section")
                        .WithMany("Sections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("HeroMed_API.Entities.User", b =>
                {
                    b.HasOne("HeroMed_API.Entities.Employee", "AccountOf")
                        .WithOne("User")
                        .HasForeignKey("HeroMed_API.Entities.User", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountOf");
                });

            modelBuilder.Entity("HeroMed_API.Entities.Employee", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("HeroMed_API.Entities.Job", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HeroMed_API.Entities.Section", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
